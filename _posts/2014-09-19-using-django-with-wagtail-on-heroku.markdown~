---
layout: post
title: Write your first Django app and deploy it on Heroku
date: 2014-09-19 17:23:01 
disqus: true
---

This quickstart will get you going with a Python/Django application that uses a Postgres 
database, deployed to Heroku. It's a version of tutorial described here. 

Prerequisites

- The Heroku Toolbelt, as described in Getting Started with Python.
- Installed Python and Virtualenv in a unix-style environment. See this guide for guidance.
- A Heroku user account. Signup is free and instant.

Start a Django app inside a Virtualenv

First, we’ll create an empty top-level directory for our project:

{% highlight bash %}
$ mkdir hellodjango && cd hellodjango
{% endhighlight %}

Next, we’ll create a Python Virtualenv:

{% highlight bash %}
$ virtualenv venv
New python executable in venv/bin/python
Installing setuptools, pip...done.
{% endhighlight %}

To use the new virtualenv, we need to activate it. (You must source the virtualenv environment for each terminal session where you wish to run your app.)

{% highlight bash %}
$ source venv/bin/activate
{% endhighlight %}

Next, install our application’s dependencies with pip. In this case, we will be installing django-toolbelt, which includes all of the packages we need:

- Django (the web framework)
- Gunicorn (WSGI server)
- dj-database-url (a Django configuration helper)
- dj-static (a Django static file server)

From your virtualenv:

{% highlight bash %}
$ pip install django-toolbelt

Installing collected packages: Django, psycopg2, gunicorn, dj-database-url, dj-static, static
  ...
Successfully installed Django psycopg2 gunicorn dj-database-url dj-static static
Cleaning up...
{% endhighlight %}

Now that we have a clean Python environment to work in, we’ll create our simple Django 
application.

{% highlight bash %}
 django-admin.py startproject hellodjango . 
{% endhighlight %}

Declare process types with Procfile

Use a Procfile, a text file in the root directory of your application, to explicitly declare what command should be executed to start a web dyno. In this case, you need to execute Gunicorn with a few arguments.
Here’s a Procfile for our new app. It should be called Procfile and live at the root directory of our project:

Procfile

{% highlight bash %}
web: gunicorn hellodjango.wsgi --log-file -
{% endhighlight %}

Specify dependencies with Pip

Heroku recognizes Python applications by the existence of a requirements.txt file in the root of a repository. This simple format is used by most Python projects to specify the external Python modules the application requires.
Pip has a nice command (pip freeze) that will generate this file for us:

{% highlight bash %}
$ pip freeze > requirements.txt
{% endhighlight %}

Django settings

Next, configure the application for the Heroku environment, including Heroku’s Postgres database. The dj-database-url module will parse the value of the DATABASE_URL environment variable and convert them to something Django can understand.



settings.py

{% highlight python %}

# Parse database configuration from $DATABASE_URL
import dj_database_url
DATABASES['default'] =  dj_database_url.config()

# Honor the 'X-Forwarded-Proto' header for request.is_secure()
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Allow all host headers
ALLOWED_HOSTS = ['*']

# Static asset configuration
import os
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
STATIC_ROOT = 'staticfiles'
STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

{% endhighlight %}

With these settings available, you can add the following code to wsgi.py to serve static files in production:

wsgi.py

{% highlight python %}

from django.core.wsgi import get_wsgi_application
from dj_static import Cling

application = Cling(get_wsgi_application())

{% endhighlight %}

Store your app in Git

Now that we’ve written and tested our application, we need to store the project in a Git repository.
Since our current directory contains a lof of extra files, we’ll want to configure our repository to ignore these files with a .gitignore file:
GitHub provides an excellent Python gitignore file that can be installed system-wide.

.gitignore

{% highlight bash %}
venv
*.pyc
staticfiles
{% endhighlight %}

Next, we’ll create a new git repository and save our changes.

{% highlight bash %}
$ git init
Initialized empty Git repository in /Users/kreitz/hellodjango/.git/
$ git add .
$ git commit -m "my django app"
[master (root-commit) 2943412] my django app
 7 files changed, 230 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 Procfile
 create mode 100644 hellodjango/__init__.py
 create mode 100644 hellodjango/settings.py
 create mode 100644 hellodjango/urls.py
 create mode 100644 hellodjango/wsgi.py
 create mode 100644 manage.py
 create mode 100644 requirements.txt
{% endhighlight %} 
 
Deploy to Heroku

The next step is to push the application’s repository to Heroku. First, we have to get a place to push to from Heroku. We can do this with the heroku create command:

{% highlight bash %}
$ heroku create
Creating simple-spring-9999... done, stack is cedar
http://simple-spring-9999.herokuapp.com/ | git@heroku.com:simple-spring-9999.git
Git remote heroku added
This automatically added the Heroku remote for our app (git@heroku.com:simple-spring-9999.git) to our repository. Now we can do a simple git push to deploy our application:
$ git push heroku master
Counting objects: 11, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (9/9), done.
Writing objects: 100% (11/11), 4.01 KiB, done.
Total 11 (delta 0), reused 0 (delta 0)
-----> Python app detected
-----> No runtime.txt provided; assuming python-2.7.6.
-----> Preparing Python runtime (python-2.7.6)
-----> Installing Distribute (0.6.36)
-----> Installing Pip (1.3.1)
-----> Installing dependencies using Pip (1.3.1)
       Downloading/unpacking Django==1.5 (from -r requirements.txt (line 1))
       ...
       Successfully installed Django psycopg2 gunicorn dj-database-url dj-static static
       Cleaning up...
-----> Collecting static files
       0 static files copied.

-----> Discovering process types
       Procfile declares types -> web

-----> Compiled slug size is 29.5MB
-----> Launching... done, v6
       http://simple-spring-9999.herokuapp.com deployed to Heroku

To git@heroku.com:simple-spring-9999.git
* [new branch]      master -> master
{% endhighlight %}

Visit your application






